# HXL-Proxy
# Note: the HXL-proxy, strictly speaking, is intended to be used as human interface, not as REST API. So even if this OpenAPI go beyond draft, is unlikely that will be as relevant as the official documentation at https://github.com/HXLStandard/hxl-proxy/wiki. BUT the documentation for API usage is at https://github.com/HXLStandard/hxl-proxy/wiki/API. 
# The version of the OpenAPI document: 3
# Contact: hxlproject@googlegroups.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package openapi2graphql

# default_api

type mutation {
}

type query {
  # Computer programs can use the HXL Proxy as if it were an Application programming interface (API).  There are two basic URL patterns available (substitute a different domain if you are using a local copy of the proxy):  &#x60;&#x60;&#x60; https://proxy.hxlstandard.org/data.&lt;ext&gt; https://proxy.hxlstandard.org/data/download/&lt;basename&gt;.&lt;ext&gt; &#x60;&#x60;&#x60; The ext portion may be either \&quot;csv\&quot; for [CSV](https://en.wikipedia.org/wiki/Comma-separated_values) data, or \&quot;json\&quot; for [JSON](https://en.wikipedia.org/wiki/JSON) data. In the second form, you can chose any custom download filename by setting the basename appropriately, e.g. \&quot;2016-burundi-3w\&quot;.  You may optionally also include the form parameters from the interactive [Recipe page](https://github.com/HXLStandard/hxl-proxy/wiki/Recipe-page) if you wish. The HXL Proxy will read the recipe parameter first, then append any form-based filters after it.  For full documentation, see &lt;https://github.com/HXLStandard/hxl-proxy/wiki/API&gt;. 
  # @param String! url URL of the original dataset (see Special URL handling). See &lt;https://github.com/HXLStandard/hxl-proxy/wiki/Special-URL-handling&gt;. 
  # @param Int! sheet Zero-based index of the tab to use from an Excel workbook 
  # @return [String!]
  DataCsvGet(url: String!, sheet: Int!): String!

}

