# The ReliefWeb API
# Interactive API documentation for the data API of Reliefweb.int. ReliefWeb is a leading source of information on global crises and disasters.  Our continuous coverage and archive going back to the 1970s makes ReliefWeb an unparalleled resource for both current and historical data on humanitarian response. The vast majority of content on ReliefWeb has been contributed by humanitarian partners. We owe it to the community to make data more accessible and reusable, so that developers can build tools that increase exposure for valuable content and facilitate analysis for better decisions.
# The version of the OpenAPI document: v1
# Contact: api@reliefweb.int
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package openapi2graphql

# jobs_api

type mutation {
  # List or search humanitarian job offers. 
  # @param PostParams postParams Returned fields
  # @return [Job]
  SearchJobs(postParams: PostParams): Job

}

type query {
  # Find job by its unique ID
  # Individual jobs. 
  # @param String! jobId The identifier of the job.
  # @param String! profile Pre-built standard selections of fields to return for ease of displaying lists or items. 
  # @param [String!] fieldsInclude Specify which fields to include for each item. Defaults to an item label. 
  # @param [String!] fieldsExclude Specify sub-fields to exclude from overall results. For example, if you include date you may exclude date.changed. 
  # @return [Job]
  GetJobById(jobId: String!, profile: String!, fieldsInclude: [String!], fieldsExclude: [String!]): Job

  # List or search humanitarian job offers. 
  # @param String! queryValue Specify the terms of your fuzzy search. The default is no query. 
  # @param String! queryOperator Specify the operator by which your search query words will be combined. 
  # @param [String!] queryFields Specify which fields to target with your search. You may use boost syntax here, see the Advanced API Usage documentation. 
  # @param String! filterField Field to filter by. Every condition must contain either a field or conditions property. 
  # @param [String!] filterValue Value for the field being filtered. Leave blank to require existence of the field, must be present for range and value conditions. 
  # @param String! filterOperator Operator by which filters will be combined. 
  # @param Boolean! filterNegate Reverse the filter to include those items that do not match. 
  # @param [String!] filterConditions This property is used to combine conditions with a logical connector (the operator property). Every condition must contain one of the field or conditions properties. 
  # @param String! facetsField Field to facet by. May include dates, references or the status field. 
  # @param String! facetsName Identifier for resulting facet data. Useful when faceting multiple ways on the same field. 
  # @param Int! facetsLimit Limit the number of facets returned for non-date based facets. 
  # @param String! facetsSort The sort order of non-date facets. Sorting may be by value or count of terms, and ascending or descending. count defaults to desc, value defaults to asc. 
  # @param [String!] facetsFilter Apply all the same capabilities of the filter parameter to the specific results of this facet request. 
  # @param String! facetsInterval Round date information to the nearest interval unit. Apply all the same capabilities of the filter parameter to the specific results of this facet request. 
  # @param [String!] fieldsInclude Specify which fields to include for each item. Defaults to an item label. 
  # @param [String!] fieldsExclude Specify sub-fields to exclude from overall results. For example, if you include date you may exclude date.changed. 
  # @param Int! limit The maximum number of items to return for a list query. The default is 10 and the maximum 1000. 
  # @param Int! offset The offset from which to return the items in a list query. Allows paging through all results. The default is 0. 
  # @param [String!] sort Sort the list results. Defaults to search relevance. Values in the form of fieldname:(asc|desc). 
  # @param String! profile Pre-built standard selections of fields to return for ease of displaying lists or items. 
  # @param String! preset Pre-built standard configurations of queries, filters and sorts for common use cases. 
  # @return [Job]
  GetJobs(queryValue: String!, queryOperator: String!, queryFields: [String!], filterField: String!, filterValue: [String!], filterOperator: String!, filterNegate: Boolean!, filterConditions: [String!], facetsField: String!, facetsName: String!, facetsLimit: Int!, facetsSort: String!, facetsFilter: [String!], facetsInterval: String!, fieldsInclude: [String!], fieldsExclude: [String!], limit: Int!, offset: Int!, sort: [String!], profile: String!, preset: String!): Job

}

