# UN OCHA COD Version 2 API (English)
#  This resource, using [OpenAPI 3.0 specification](https://www.openapis.org/) and [dedicated to public domain](https://unlicense.org/), is an [HXL-CPLP volunteers user group](https://github.com/HXL-CPLP) initiative to document the [COD Version 2 API](https://beta.itos.uga.edu/CODV2API/) in Portuguese language. Use of resource (recommended: see [Open API Tools](https://openapi.tools/)) to make integrations and translations to other natural languages.  **Important:** HXL-CPLP, translators, volunteers or third-party projects using the OpenAPI file are not affiliated with the API providers. Use of public domain like licenses (when viable) on derived work is encouraged.  ## About the API  The API is built for humanitarian information management. Some [UN OCHA](https://www.unocha.org/) activities are encapsulated in this tool with respect to Common Operational Datasets maintenance. Find metadata and location information and gazeteer type output for the CODs compatible for applications and for visualizations. The scope of the data varies but comprises enhanced CODs processed in OCHA workflows for roughly 50 countries (as shown in the [COD dashboard](https://cod.unocha.org/)) in the humanitarian support sphere. For more information see the [About page](https://beta.itos.uga.edu/CODV2API/Home/About). Enjoy and comments welcome at ocha-fis-data@un.org.  ## What are CODs? Common Operational Datasets (CODs) are authoritative reference datasets needed to support operations and decision-making for all actors in a humanitarian response. CODs are 'best available' datasets that ensure consistency and simplify the discovery and exchange of key data for the humanitarian community. 
# The version of the OpenAPI document: 2
# Contact: ocha-fis-data@un.org
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package openapi2graphql

# codapi_api

type mutation {
}

type query {
  # @return [[LocationMetadataReply]]
  LocationsGet(): [LocationMetadataReply]

  # @param String! pCode P-code (Place Code) is (TODO: ADD SHORT DESCRIPTION)
  # @return [[LocationMetadataReply]]
  LocationsPCodeGet(pCode: String!): [LocationMetadataReply]

  # @param String! pCode (TODO: ADD SHORT DESCRIPTION)
  # @return [String!]
  ThemesCodAbLocationsPCodeGet(pCode: String!): String!

  # @param String! pCode (TODO: ADD SHORT DESCRIPTION)
  # @param String! format Examples: SHP, vectortiles, Geodatabase, Geoservice, XLSX, CSV, geoJSON  - Note that shapefiles (\&quot;SHP\&quot; format) are downloaded for all   levels (administrative boundary designations) since they are   packaged that way. However Vector tiles, - NEW!!!! are downloaded for the respective level as they are   available. For the list of available vector tiles, check out the   github and search for the .mbtiles term or column in the   spreadsheet: [service deployment status](https://github.com/UGA-ITOSHumanitarianGIS/mapservicedoc/blob/master/Data/AWSDeploymentURLlist.xlsx). 
  # @param String! level Example: 2 For levels, check out the list of levels available for each COD country: at /themes/cod-ab/locations/SYR/versions/current 
  # @return [String!]
  ThemesCodAbLocationsPCodeVersionsCurrentFormatLevelGet(pCode: String!, format: String!, level: String!): String!

  # @param String! pCode P-code (Place Code) is (TODO: ADD SHORT DESCRIPTION)
  # @return [[LocationMetadataReply]]
  ThemesCodAbLocationsPCodeVersionsCurrentGet(pCode: String!): [LocationMetadataReply]

  # @param String! pCode (TODO: ADD SHORT DESCRIPTION)
  # @param String! level Individual level (1 of 0-n)
  # @param String! z (FIXME: add description)
  # @param String! x (FIXME: add description)
  # @param String! y (FIXME: add description)
  # @return [String!]
  ThemesCodAbLocationsPCodeVersionsCurrentLevelZXYPbfGet(pCode: String!, level: String!, z: String!, x: String!, y: String!): String!

  # @param String! pCode P-code (Place Code) is (TODO: ADD SHORT DESCRIPTION)
  # @param Int! versionId (TODO: ADD SHORT DESCRIPTION)
  # @return [String!]
  ThemesCodAbLocationsPCodeVersionsVersionIdGet(pCode: String!, versionId: Int!): String!

}

